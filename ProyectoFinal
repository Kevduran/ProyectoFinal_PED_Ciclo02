#include <iostream>
#include <string>
#include <stdlib.h>
#include <queue>
#include <stdio.h>
#include <time.h>

using namespace std;1

struct Sintomas{
	string sintoma;
	float tiempo;
};
typedef struct Sintomas sintomas;

struct Paciente{
	string nombre;
	int edad;
	char sexo;
	string municipio;
	int identificacion;
	queue <sintomas> colasintomas;
	bool estado;
};
typedef struct Paciente paciente;

struct Nodo{
	paciente persona;
	Nodo *sig;
};
Nodo *Inicio;

void MenuRecepcion();
void MenuClinica();
void agregar();
void AgregarPaciente(paciente person);
void eliminar();
bool comparar(paciente a, paciente b);
void visualizarPaciente();
void mostrar(paciente a);
void visualizarLista();
void borrarListaCompleta();
void verPrimero();
void verUltimo();
void Atender();
int prueba();
void NumeroPositivos();
void NumeroNegativos();
void borrarColasCompleta();

queue <paciente> Positivos;
queue <paciente> Negativos;

int main(){
	
	Inicio=NULL;
	
	bool continuar=true; 
	
	do{
		system("cls");
		int opcion=0;
		cout<<"\n\t\t.:BIENVENIDO:."<<endl;
		
		cout<<"\n\tOpciones:"<<endl;
		cout<<"\n\t1. Recepcion";
		cout<<"\n\t2. Clinica";
		cout<<"\n\t3. Reiniciar programa";
		cout<<"\n\t4. Terminar";
		cout<<"\n\tNumero: "; cin>>opcion;
		
		switch(opcion){
			case 1:{
				MenuRecepcion();
				break;
			}
			case 2:{
				MenuClinica();
				break;
			}
			case 3:{
				borrarListaCompleta();
				borrarColasCompleta();
				cout<<"\nReiniciando..."<<endl;
				cout<<"Completado"<<endl;
				system("pause");
				break;
			}
			case 4:{
				continuar=false;
				break;
			}
			default:{
				cout<<"\nOpcion Inexistente";
				cout<<"\nIntente de nuevo. ";
				system("pause");
				break;
			}
		}
	}while(continuar);
	
	cout<<"\n\n   .:MUCHAS GRACIAS POR SU PREFERENCIA:."<<endl;
	
	return 0;
}

void MenuRecepcion(){
	
	bool continuar=true;
	
	do{
		system("cls");
		int opcion2=0;
		
		cout<<"\n\tOpciones:"<<endl;
		cout<<"\n\t1. Ingresar paciente";
		cout<<"\n\t2. Retirar paciente";
		cout<<"\n\t3. Expediente de un paciente";
		cout<<"\n\t4. Visualizar lista de espera";
		cout<<"\n\t5. Borrar lista de espera completa";
		cout<<"\n\t6. Ver primero en la lista";
		cout<<"\n\t7. Ver ultimo en la lista";
		cout<<"\n\t8.Salir";
		cout<<"\n\tR/ ";
		cin>>opcion2;
		
		switch(opcion2){
			case 1:{
				agregar();
				break;
			}
			case 2:{
				eliminar();
				break;
			}
			case 3:{
				visualizarPaciente();
				break;
			}
			case 4:{
				visualizarLista();
				break;
			}
			case 5:{
				borrarListaCompleta();
				cout<<"\nLista Borrada"<<endl;
				system("pause");
				break;
			}
			case 6:{
				verPrimero();
				break;
			}
			case 7:{
				verUltimo();
				break;
			}
			case 8:{
				continuar=false;
				break;
			}
			default:{
				cout<<"Opcion Invalida";
				cout<<"Intentelo de nuevo. ";
				system("pause");
				break;
			}
		}
	}while(continuar);
	
}

void MenuClinica(){
	
	bool continuar=true;
	
	do{
		system("cls");
		int opcion2=0;
		Nodo *x=Inicio;
		cout<<"\n\tOpciones:"<<endl;
		
		cout<<"\n\t1. Atender Paciente ";
		if(x==NULL){
			cout<<"(Sin pacientes)";
		}else{
			cout<<x->persona.nombre;
		}
		cout<<"\n\t2. Ver casos positivos";
		cout<<"\n\t3. Ver casos negativos";
		cout<<"\n\t4. Salir";
		cout<<"\n\tR/ ";
		cin>>opcion2;
		
		switch(opcion2){
			case 1:{
				Atender();
				break;
			}
			case 2:{
				NumeroPositivos();
				break;
			}
			case 3:{
				NumeroNegativos();
				break;
			}
			case 4:{
				continuar=false;
				break;
			}
			default:{
				cout<<"Opcion Invalida";
				cout<<"Intentelo de nuevo. ";
				system("pause");
				break;
			}
		}
	}while(continuar);
	
}

void agregar(){
	bool comprobar=true;
	paciente x;
	fflush(stdin);
	cout<<"\tNombre: ";getline(cin,x.nombre);
	Nodo *p = Inicio, *q = NULL;
	do{
		cout<<"\tIdentificacion: ";cin>>x.identificacion;cin.ignore();
		while(p != NULL && !comparar(p->persona, x)){
        q = p;
        p = p->sig;
    	}
    	if(p==NULL){
    		comprobar=false;
		}
	}while(comprobar);
	cout<<"\tEdad: ";cin>>x.edad;cin.ignore();
	do{
		cout<<"\tSexo M/F: ";cin>>x.sexo;cin.ignore();
	}while((x.sexo!='M')&&(x.sexo!='F')&&(x.sexo!='m')&&(x.sexo!='f'));
	cout<<"\tMunicipio: ";getline(cin,x.municipio);
	
	bool continuar=true;
	do{
		sintomas muestra;
		char resp;
		fflush(stdin);
		cout<<"Sintoma: ";getline(cin,muestra.sintoma);
		cout<<"Duracion en dias del sintoma: ";cin>>muestra.tiempo;cin.ignore();
		
		x.colasintomas.push(muestra);
		
		do{
			cout<<"Desea continuar? s/n  : ";cin>>resp;
			if((resp=='n')||(resp=='N')){
				continuar=false;
			}
		}while((resp!='n')&&(resp!='N')&&(resp!='s')&&(resp!='S'));
	}while(continuar);
	
	AgregarPaciente(x);
	
}

void AgregarPaciente(paciente person){
	Nodo *nuevo=new Nodo;
	nuevo->persona=person;
	nuevo->sig=NULL;
	
	if(Inicio==NULL) {
        Inicio = nuevo;
    }else{
        Nodo *p=Inicio;
        Nodo *q=NULL;
        while(p!=NULL) {
            q = p;
            p = p->sig;
        }
        q->sig = nuevo;
    }
	
}

void eliminar(){
    cout << "Dato a eliminar: ";
    paciente ref;
    
	fflush(stdin);
    cout<<"Identificacion: ";cin>>ref.identificacion;//Agregar el ciclo para que no se repita
    
    Nodo *p = Inicio, *q = NULL;
    
    while(p != NULL && !comparar(p->persona, ref)){
        q = p;
        p = p->sig;
    }
    if(p == NULL){
        cout << "Dato a borrar NO existe" << endl;
    }
	
    if(q == NULL){
    	Inicio = p->sig;
	}else{
		q->sig = p->sig;
	}
	
    delete(p);
    
    cout << "Dato borrado!" << endl;
}
